<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"bc12d0ca7c","applicationID":"1887052,5587075","transactionName":"IlgMRUFXWFhWEE5CQwBDF0IcS0BVRxcSHl4PUwdJ","queueTime":0,"applicationTime":175,"ttGuid":"","agentToken":null,"agent":"js-agent.newrelic.com/nr-686.min.js"}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,n,t){function r(t){if(!n[t]){var o=n[t]={exports:{}};e[t][0].call(o.exports,function(n){var o=e[t][1][n];return r(o?o:n)},o,o.exports)}return n[t].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<t.length;o++)r(t[o]);return r}({QJf3ax:[function(e,n){function t(e){function n(n,t,a){e&&e(n,t,a),a||(a={});for(var u=c(n),f=u.length,s=i(a,o,r),p=0;f>p;p++)u[p].apply(s,t);return s}function a(e,n){f[e]=c(e).concat(n)}function c(e){return f[e]||[]}function u(){return t(n)}var f={};return{on:a,emit:n,create:u,listeners:c,_events:f}}function r(){return{}}var o="nr@context",i=e("gos");n.exports=t()},{gos:"7eSDFh"}],ee:[function(e,n){n.exports=e("QJf3ax")},{}],3:[function(e,n){function t(e){return function(){r(e,[(new Date).getTime()].concat(i(arguments)))}}var r=e("handle"),o=e(1),i=e(2);"undefined"==typeof window.newrelic&&(newrelic=window.NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit","noticeError"];o(a,function(e,n){window.NREUM[n]=t("api-"+n)}),n.exports=window.NREUM},{1:12,2:13,handle:"D5DuLP"}],gos:[function(e,n){n.exports=e("7eSDFh")},{}],"7eSDFh":[function(e,n){function t(e,n,t){if(r.call(e,n))return e[n];var o=t();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,n,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return e[n]=o,o}var r=Object.prototype.hasOwnProperty;n.exports=t},{}],D5DuLP:[function(e,n){function t(e,n,t){return r.listeners(e).length?r.emit(e,n,t):void(r.q&&(r.q[e]||(r.q[e]=[]),r.q[e].push(n)))}var r=e("ee").create();n.exports=t,t.ee=r,r.q={}},{ee:"QJf3ax"}],handle:[function(e,n){n.exports=e("D5DuLP")},{}],XL7HBI:[function(e,n){function t(e){var n=typeof e;return!e||"object"!==n&&"function"!==n?-1:e===window?0:i(e,o,function(){return r++})}var r=1,o="nr@id",i=e("gos");n.exports=t},{gos:"7eSDFh"}],id:[function(e,n){n.exports=e("XL7HBI")},{}],G9z0Bl:[function(e,n){function t(){var e=d.info=NREUM.info,n=f.getElementsByTagName("script")[0];if(e&&e.licenseKey&&e.applicationID&&n){c(p,function(n,t){n in e||(e[n]=t)});var t="https"===s.split(":")[0]||e.sslForHttp;d.proto=t?"https://":"http://",a("mark",["onload",i()]);var r=f.createElement("script");r.src=d.proto+e.agent,n.parentNode.insertBefore(r,n)}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=e("handle"),c=e(1),u=window,f=u.document;e(2);var s=(""+location).split("?")[0],p={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-686.min.js"},d=n.exports={offset:i(),origin:s,features:{}};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),u.addEventListener("load",t,!1)):(f.attachEvent("onreadystatechange",r),u.attachEvent("onload",t)),a("mark",["firstbyte",i()])},{1:12,2:3,handle:"D5DuLP"}],loader:[function(e,n){n.exports=e("G9z0Bl")},{}],12:[function(e,n){function t(e,n){var t=[],o="",i=0;for(o in e)r.call(e,o)&&(t[i]=n(o,e[o]),i+=1);return t}var r=Object.prototype.hasOwnProperty;n.exports=t},{}],13:[function(e,n){function t(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,o=t-n||0,i=Array(0>o?0:o);++r<o;)i[r]=e[n+r];return i}n.exports=t},{}]},{},["G9z0Bl"]);</script>
    <!-- force IE browsers in compatibility mode to use their most aggressive rendering engine -->

    <meta charset="utf-8">
    <title>Vox Media Status</title>
    <meta name="description" content="Welcome to Vox Media&#39;s home for real-time and historical data on system performance.">

    <!-- Mobile viewport optimization h5bp.com/ad -->
    <meta name="HandheldFriendly" content="True">
    <meta name="MobileOptimized" content="320">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0">

    <!-- Mobile IE allows us to activate ClearType technology for smoothing fonts for easy reading -->
    <meta http-equiv="cleartype" content="on">

    <!-- Le fonts -->
<style>
  @font-face {
    font-family: 'proxima-nova';
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaLight.eot?host=status.voxmedia.com');
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaLight.eot?host=status.voxmedia.com#iefix') format('embedded-opentype'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaLight.woff?host=status.voxmedia.com') format('woff'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaLight.ttf?host=status.voxmedia.com') format('truetype');
    font-weight:300;
    font-style:normal;
  }
   
  @font-face {
    font-family: 'proxima-nova';
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaRegular.eot?host=status.voxmedia.com');
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaRegular.eot?host=status.voxmedia.com#iefix') format('embedded-opentype'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaRegular.woff?host=status.voxmedia.com') format('woff'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaRegular.ttf?host=status.voxmedia.com') format('truetype');
    font-weight:400;
    font-style:normal;
  }
   
  @font-face {
    font-family: 'proxima-nova';
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaRegularIt.eot?host=status.voxmedia.com');
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaRegularIt.eot?host=status.voxmedia.com#iefix') format('embedded-opentype'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaRegularIt.woff?host=status.voxmedia.com') format('woff'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaRegularIt.ttf?host=status.voxmedia.com') format('truetype');
    font-weight:400;
    font-style:italic;
  }
   
  @font-face {
    font-family: 'proxima-nova';
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaSemibold.eot?host=status.voxmedia.com');
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaSemibold.eot?host=status.voxmedia.com#iefix') format('embedded-opentype'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaSemibold.woff?host=status.voxmedia.com') format('woff'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaSemibold.ttf?host=status.voxmedia.com') format('truetype');
    font-weight:500;
    font-style:normal;
  }
   
  @font-face {
    font-family: 'proxima-nova';
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaBold.eot?host=status.voxmedia.com');
    src: url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaBold.eot?host=status.voxmedia.com#iefix') format('embedded-opentype'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaBold.woff?host=status.voxmedia.com') format('woff'),
         url('//dka575ofm4ao0.cloudfront.net/assets/ProximaNovaBold.ttf?host=status.voxmedia.com') format('truetype');
    font-weight:700;
    font-style:normal;
  }
</style>

    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="img/touch/apple-touch-icon-144x144-precomposed.png" />
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="img/touch/apple-touch-icon-114x114-precomposed.png" />
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="img/touch/apple-touch-icon-72x72-precomposed.png" />
    <link rel="apple-touch-icon-precomposed" href="img/touch/apple-touch-icon-57x57-precomposed.png" />

    <link rel="shortcut icon" href='//dka575ofm4ao0.cloudfront.net/pages-favicon_logos/original/991/open-uri20130808-1946-bs29q6'>

    <link rel="alternate" type="application/atom+xml" href="http://status.voxmedia.com/history.atom" title="Vox Media Status History - Atom Feed">
    <link rel="alternate" type="application/rss+xml" href="http://status.voxmedia.com/history.rss" title="Vox Media Status History - RSS Feed">


    <link href="http://status.voxmedia.com/history.atom" rel="alternate" title="ATOM" type="application/atom+xml" />

    <meta content="authenticity_token" name="csrf-param" />
<meta content="rCxbObU8Xp3mUqR1nQGsZoE5HExyX0roDnVG1DLbTGs=" name="csrf-token" />

    <!-- Le styles -->
    <link href="//dka575ofm4ao0.cloudfront.net/assets/status_manifest-4cc71a3a45b6dde59ce2b3468127b7d1.css" media="all" rel="stylesheet" />

      <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

    <style>




  /* BODY BACKGROUND */ /* BODY BACKGROUND */ /* BODY BACKGROUND */ /* BODY BACKGROUND */ /* BODY BACKGROUND */ 
  body,
  .layout-content.status.status-api .section .example-container .example-opener .color-secondary,
  .grouped-items-selector {
    background-color:#ffffff;
  }





  /* PRIMARY FONT COLOR */ /* PRIMARY FONT COLOR */ /* PRIMARY FONT COLOR */ /* PRIMARY FONT COLOR */ 
  body.status,
  .color-primary,
  .color-primary:hover,
  .layout-content.status-index .status-day .update-title.impact-none a,
  .layout-content.status-index .status-day .update-title.impact-none a:hover,
  .layout-content.status-index .timeframes-container .timeframe.active,
  .layout-content.status-full-history .month .incident-container .impact-none,
  .layout-content.status.status-index .incidents-list .incident-title.impact-none a {
    color: #333333;
  }

  .layout-content.status.status-index .components-statuses .component-container .name {
    color:#333333;
    color:rgba(51,51,51,.8);
  }






  /* SECONDARY FONT COLOR */ /* SECONDARY FONT COLOR */ /* SECONDARY FONT COLOR */ /* SECONDARY FONT COLOR */ 
  small,
  .layout-content.status .table-row .date,
  .color-secondary {
    color: #AAAAAA;
  }









  /* BORDER COLOR */  /* BORDER COLOR */  /* BORDER COLOR */  /* BORDER COLOR */  /* BORDER COLOR */  /* BORDER COLOR */ 
  .border-color, hr, .tooltip-base {
    border-color: #E0E0E0;
  }






  /* CSS REDS */ /* CSS REDS */ /* CSS REDS */ /* CSS REDS */ /* CSS REDS */ /* CSS REDS */ /* CSS REDS */ 
  .layout-content.status.status-index .status-day .update-title.impact-critical a,
  .layout-content.status.status-index .status-day .update-title.impact-critical a:hover,
  .layout-content.status.status-index .page-status.status-critical,
  .layout-content.status.status-index .unresolved-incident.impact-critical .incident-title,
  .flat-button.background-red {
    background-color: #e74c3c;
  }
  .layout-content.status-index .components-statuses .component-container.status-red:after,
  .layout-content.status-full-history .month .incident-container .impact-critical,
  .layout-content.status-incident .incident-name.impact-critical,
  .layout-content.status.status-index .incidents-list .incident-title.impact-critical a,
  .status-red .icon-indicator,
  .components-container .component-inner-container.status-red .component-status,
  .components-container .component-inner-container.status-red .icon-indicator {
    color: #e74c3c;
  }

  .layout-content.status.status-index .unresolved-incident.impact-critical .updates {
    border-color:#e74c3c;
  }






  /* CSS ORANGES */ /* CSS ORANGES */ /* CSS ORANGES */ /* CSS ORANGES */ /* CSS ORANGES */ /* CSS ORANGES */ 
  .layout-content.status.status-index .status-day .update-title.impact-major a,
  .layout-content.status.status-index .status-day .update-title.impact-major a:hover,
  .layout-content.status.status-index .page-status.status-major,
  .layout-content.status.status-index .unresolved-incident.impact-major .incident-title {
    background-color: #f5740f;
  }
  .layout-content.status-index .components-statuses .component-container.status-orange:after,
  .layout-content.status-full-history .month .incident-container .impact-major,
  .layout-content.status-incident .incident-name.impact-major,
  .layout-content.status.status-index .incidents-list .incident-title.impact-major a,
  .status-orange .icon-indicator,
  .components-container .component-inner-container.status-orange .component-status,
  .components-container .component-inner-container.status-orange .icon-indicator {
    color: #f5740f;
  }

  .layout-content.status.status-index .unresolved-incident.impact-major .updates {
    border-color: #f5740f;
  }







/* CSS YELLOWS */ /* CSS YELLOWS */ /* CSS YELLOWS */ /* CSS YELLOWS */ /* CSS YELLOWS */ /* CSS YELLOWS */ 
  .layout-content.status.status-index .status-day .update-title.impact-minor a,
  .layout-content.status.status-index .status-day .update-title.impact-minor a:hover,
  .layout-content.status.status-index .page-status.status-minor,
  .layout-content.status.status-index .unresolved-incident.impact-minor .incident-title, 
  .layout-content.status.status-index .scheduled-incidents-container .tab {
    background-color: #ffde00;
  }
  .layout-content.status-index .components-statuses .component-container.status-yellow:after,
  .layout-content.status-full-history .month .incident-container .impact-minor,
  .layout-content.status-incident .incident-name.impact-minor,
  .layout-content.status.status-index .incidents-list .incident-title.impact-minor a,
  .status-yellow .icon-indicator,
  .components-container .component-inner-container.status-yellow .component-status,
  .components-container .component-inner-container.status-yellow .icon-indicator {
    color: #ffde00;
  }

  .layout-content.status.status-index .unresolved-incident.impact-minor .updates,
  .layout-content.status.status-index .scheduled-incidents-container {
    border-color:#ffde00;
  }






  /* CSS GREENS */ /* CSS GREENS */ /* CSS GREENS */ /* CSS GREENS */ /* CSS GREENS */ /* CSS GREENS */ /* CSS GREENS */ 
  .layout-content.status.status-index .page-status.status-none {
    background-color: #0da540;
  }
  .layout-content.status-index .components-statuses .component-container.status-green:after,
  .status-green .icon-indicator,
  .components-container .component-inner-container.status-green .component-status,
  .components-container .component-inner-container.status-green .icon-indicator {
    color: #0da540;
  }




  /* CSS LINK COLOR */  /* CSS LINK COLOR */  /* CSS LINK COLOR */  /* CSS LINK COLOR */  /* CSS LINK COLOR */  /* CSS LINK COLOR */  
  a,
  a:hover,
  .layout-content.status-index .page-footer span a:hover,
  .layout-content.status-index .timeframes-container .timeframe:not(.active):hover,
  .layout-content.status-incident .subheader a:hover {
    color: #3498DB;
  }
  .flat-button, .masthead .updates-dropdown-container .show-updates-dropdown {
    background-color:#3498DB;
  }


</style>

    <!-- custom css -->


    <!-- Le HTML5 shim -->
    <!--[if lt IE 9]>
      <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <!-- injection for static -->

    
  </head>

  <body class="status index ">

    

  <div class="status-page-tour-info" data-js-hook="status-page-tour-info" style="display:none">
  <div class="container inner">
    Welcome to the demo status page. <a href="#" data-js-hook="restart-tour">Take the tour</a>.
  </div>
</div>

  <div class="layout-content status status-index starter">
      <div class="masthead-container basic">

    <div class="masthead has-logo">
        <div class="logo-container">
            <a href="http://status.voxmedia.com"><img alt="Open uri20130808 29363 1dte7lt" src="//dka575ofm4ao0.cloudfront.net/pages-transactional_logos/retina/991/open-uri20130808-29363-1dte7lt" style="" /></a>
        </div>

      

<div class="updates-dropdown-container" data-js-hook="updates-dropdown-container">
  <a href="#" data-js-hook="show-updates-dropdown" id="show-updates-dropdown" class="show-updates-dropdown">

  </a>
  <div class="updates-dropdown" data-js-hook="updates-dropdown" style="display:none">
    <div class="updates-dropdown-nav nav-items-3">
        <a href="#updates-dropdown-twitter" id="updates-dropdown-twitter-btn">
          <span class="icon-container twitter">
        </a>
      <a href="#updates-dropdown-atom" id="updates-dropdown-atom-btn">
        <span class="icon-container rss">
      </a>
      <a href="#" data-js-hook="updates-dropdown-close" id="updates-dropdown-close-btn">
        x
      </a>
    </div>
    <div class="updates-dropdown-sections-container">




        <div class="updates-dropdown-section twitter" id="updates-dropdown-twitter" style="display:none">
          <a href="https://twitter.com/SBNSupport" class="twitter-follow-button" data-show-count="false" data-show-screen-name="true" data-width="59px">Follow @SBNSupport</a>
          or&nbsp;
          <a href="http://www.twitter.com/SBNSupport" target="_blank">view our profile</a>.
          <style>
            .twitter-follow-button {
              margin-bottom: -6px;
            }
          </style>

            <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
        </div>


      <div class="updates-dropdown-section atom" id="updates-dropdown-atom">
          Get the <a href="http://status.voxmedia.com/history.atom" target="_blank">Atom Feed</a> or <a href="http://status.voxmedia.com/history.rss" target="_blank">RSS Feed</a>.
      </div>

    </div>
  </div>
</div>
      <div class="clearfix"></div>
    </div>

</div> <!-- this is outside of the .container so that the cover photo can go full width on mobile -->



    <div class="container">
        <div class="page-status status-none">
          <span class="status font-large">
            All Systems Operational
          </span>
          <span class="last-updated-stamp  font-small"></span>
        </div>


        <div class="text-section">
          <h4 class="font-largest">About This Site</h4>
          <p class="color-secondary font-regular">
            Continuous monitoring of Vox Media systems and properties, including SB Nation, The Verge, Polygon, and Vox.
          </p>
        </div>

        <div class="components-section font-regular">
    <div class="components-container one-column">
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      SB Nation
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      Polygon
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      The Verge
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      Vox
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      Eater
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      Racked
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      Chorus
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      Syllabus
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
          <div class="component-container border-color">
            <div class="component-inner-container status-green " data-js-hook="">


    <span class="name">
      Amazon S3
    </span>
    
    <span class="component-status">
      Operational
    </span>

    <span class="icon-indicator fa fa-check" data-js-hook="tooltip" data-original-title="Operational"></span>
</div>
          </div>
    </div>
    <div class="component-statuses-legend font-small">
      <div class="legend-item status-green">
        <span class="icon-indicator fa fa-check"></span>
        Operational
      </div>
      <div class="legend-item status-yellow">
        <span class="icon-indicator fa fa-minus-square"></span>
        Degraded Performance
      </div>
      <div class="legend-item status-orange">
        <span class="icon-indicator fa fa-exclamation-triangle"></span>
        Partial Outage
      </div>
      <div class="legend-item status-red">
        <span class="icon-indicator fa fa-times"></span>
        Major Outage
      </div>
    </div>
  </div>




        <div class="custom-metrics-container" id="custom-metrics-container">
          <div class="timeframes-container">
            <span class="font-largest">System Metrics</span>
            <a href="#" class="timeframe color-secondary font-regular border-color" data-js-hook="data-time-period-toggle" data-time-period="month">Month</a>
            <a href="#" class="timeframe color-secondary font-regular border-color" data-js-hook="data-time-period-toggle" data-time-period="week"><span class="translation_missing" title="translation missing: en.week">Week</span></a>
            <a href="#" class="timeframe active color-secondary font-regular border-color" data-js-hook="data-time-period-toggle" data-time-period="day">Day</a>
          </div>
          <div class="metrics-container">
              <div class="metric border-color">
                <div class="metric-meta font-large">
                  <div class="metric-name color-primary">
                    SB Nation Uptime
                                      </div>

                    <div data-js-hook="metrics-display-current-ll6trf0dg2fh" class="metric-average color-secondary"><span class="translation_missing" title="translation missing: en.fetching">Fetching</span></div>
                </div>
                  <div class="metrics-display-graph">
                    <div class="graph-container" id="metrics-display-graph-container-ll6trf0dg2fh" style="height: 120px"></div>
                  </div>
              </div>
              <div class="metric border-color">
                <div class="metric-meta font-large">
                  <div class="metric-name color-primary">
                    The Verge Uptime
                                      </div>

                    <div data-js-hook="metrics-display-current-b3m8pgs7h70q" class="metric-average color-secondary"><span class="translation_missing" title="translation missing: en.fetching">Fetching</span></div>
                </div>
                  <div class="metrics-display-graph">
                    <div class="graph-container" id="metrics-display-graph-container-b3m8pgs7h70q" style="height: 120px"></div>
                  </div>
              </div>
              <div class="metric border-color">
                <div class="metric-meta font-large">
                  <div class="metric-name color-primary">
                    Polygon Uptime
                                      </div>

                    <div data-js-hook="metrics-display-current-s6vzf4zmcv05" class="metric-average color-secondary"><span class="translation_missing" title="translation missing: en.fetching">Fetching</span></div>
                </div>
                  <div class="metrics-display-graph">
                    <div class="graph-container" id="metrics-display-graph-container-s6vzf4zmcv05" style="height: 120px"></div>
                  </div>
              </div>
              <div class="metric border-color">
                <div class="metric-meta font-large">
                  <div class="metric-name color-primary">
                    Vox Uptime
                                      </div>

                    <div data-js-hook="metrics-display-current-zy1t6tx2dn25" class="metric-average color-secondary"><span class="translation_missing" title="translation missing: en.fetching">Fetching</span></div>
                </div>
                  <div class="metrics-display-graph">
                    <div class="graph-container" id="metrics-display-graph-container-zy1t6tx2dn25" style="height: 120px"></div>
                  </div>
              </div>
              <div class="metric border-color">
                <div class="metric-meta font-large">
                  <div class="metric-name color-primary">
                    Eater Uptime
                                      </div>

                    <div data-js-hook="metrics-display-current-v178lspqgkc8" class="metric-average color-secondary"><span class="translation_missing" title="translation missing: en.fetching">Fetching</span></div>
                </div>
                  <div class="metrics-display-graph">
                    <div class="graph-container" id="metrics-display-graph-container-v178lspqgkc8" style="height: 120px"></div>
                  </div>
              </div>
              <div class="metric border-color">
                <div class="metric-meta font-large">
                  <div class="metric-name color-primary">
                    Racked Uptime
                                      </div>

                    <div data-js-hook="metrics-display-current-zllsvjcpv4mp" class="metric-average color-secondary"><span class="translation_missing" title="translation missing: en.fetching">Fetching</span></div>
                </div>
                  <div class="metrics-display-graph">
                    <div class="graph-container" id="metrics-display-graph-container-zllsvjcpv4mp" style="height: 120px"></div>
                  </div>
              </div>
              <div class="metric border-color">
                <div class="metric-meta font-large">
                  <div class="metric-name color-primary">
                    VoxMedia.com Uptime
                                      </div>

                    <div data-js-hook="metrics-display-current-2vrj0v1g34xb" class="metric-average color-secondary"><span class="translation_missing" title="translation missing: en.fetching">Fetching</span></div>
                </div>
                  <div class="metrics-display-graph">
                    <div class="graph-container" id="metrics-display-graph-container-2vrj0v1g34xb" style="height: 120px"></div>
                  </div>
              </div>
              <div class="metric border-color">
                <div class="metric-meta font-large">
                  <div class="metric-name color-primary">
                    Chorus Average Response Time (App Server)
                    <span class="tooltip-base" data-js-hook="tooltip" data-original-title="Average app server response time per request ">
                      ?
</span>                  </div>

                    <div data-js-hook="metrics-display-current-ml2w2pjdqc4s" class="metric-average color-secondary"><span class="translation_missing" title="translation missing: en.fetching">Fetching</span></div>
                </div>
                  <div class="metrics-display-graph">
                    <div class="graph-container" id="metrics-display-graph-container-ml2w2pjdqc4s" style="height: 120px"></div>
                  </div>
              </div>
          </div>
        </div>


      <div class="incidents-list format-expanded">
        <div class="font-largest">Past Incidents</div>
          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 20, 2015</div>
        <p class="color-secondary">No incidents reported today.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 19, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 18, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 17, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 16, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 15, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 14, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 13, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 12, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular ">
    <div class="date border-color font-large">Sep 11, 2015</div>
        <div class="incident-container">
  <div class="incident-title impact-minor font-large">
    <a href="/incidents/21jvb6p5d9q8">Vox Media sites are non-responsive. Please stand by.</a>
  </div>

    <div class="updates-container">
        <div class="update font-regular resolved">
            <strong>Resolved</strong> - 
        	

          	We've identified the root cause of the network issues and have taken swift and decisive action to improve the situation. We're confident that the issue has been resolved and will continue to monitor the health of our network very closely. Thank you for your patience during this period of less-than-ideal uptime.
          <br>
          <small>
              Sep 11, 20:46 EDT
          </small>
        </div>
        <div class="update font-regular update">
            <strong>Update</strong> - 
        	

          	As of now we've made a ton of progress on identifying the root cause of the issue and are taking preventive measures to mitigate the problem at the source. Thanks again for your continued patience and understanding!
          <br>
          <small>
              Sep 11, 20:09 EDT
          </small>
        </div>
        <div class="update font-regular update">
            <strong>Update</strong> - 
        	

          	Nothing new to report at this time, but we're trying everything we can to get everything back to normal. Thanks!
          <br>
          <small>
              Sep 11, 19:36 EDT
          </small>
        </div>
        <div class="update font-regular update">
            <strong>Update</strong> - 
        	

          	We're still working on it! Thanks again for your patience.
          <br>
          <small>
              Sep 11, 19:04 EDT
          </small>
        </div>
        <div class="update font-regular update">
            <strong>Update</strong> - 
        	

          	Our operations team is actively investigating the issue affecting the Vox Media network. We are working to return the sites to full functionality as quickly as possible, and we appreciate your patience.
          <br>
          <small>
              Sep 11, 18:25 EDT
          </small>
        </div>
        <div class="update font-regular investigating">
            <strong>Investigating</strong> - 
        	

          	We are investigating the degraded performance of all Vox Media sites at this time. We hope to have it resolved soon.
          <br>
          <small>
              Sep 11, 18:09 EDT
          </small>
        </div>
    </div>
  
</div>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 10, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 9, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 8, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 7, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

          
  <div class="status-day font-regular no-incidents">
    <div class="date border-color font-large">Sep 6, 2015</div>
        <p class="color-secondary">No incidents reported.</p>
  </div>

      </div>


      <div class="page-footer border-color font-small">
          <a href="/history" class="history-footer-link"><span style="font-family:arial">&larr;</span> Incident History</a>

        <span class="color-secondary powered-by">Powered by <a href="http://www.statuspage.io" target="_blank" class="color-secondary">StatusPage.io</a></span>
      </div>
    </div>

    

  </div>

<!-- register the global modal if necessary -->

<!-- register the incident modals, has to be done here since content_for isn't evaluated in cache context -->


<!-- custom metrics stuff -->
  





    <script src="//dka575ofm4ao0.cloudfront.net/assets/status_manifest-15276b79371d9c0fb12d4202030d0a2c.js"></script>
    




    <!-- all of the content_for stuff -->
      <script src="//dka575ofm4ao0.cloudfront.net/assets/status_common-37d950f58b94ceb9dbe88a2bbfb57013.js"></script>
  <script src="//dka575ofm4ao0.cloudfront.net/assets/register_subscription_form-c864ec77500521a0e0601387e5988d2e.js"></script>

    <script src="//dka575ofm4ao0.cloudfront.net/assets/status_idle-223f2379a785317927c596744579387f.js"></script>

  <script>

    $(function() {

      // clicks on first tab in subscribe popout since we won't know which is first
      // upon construction in the ruby code
      $('.updates-dropdown-nav > a').eq(0).click();

      // twitter follow button needs some margin
      $('.twitter-follow-button').css('margin-right', '6px');
    });


    $(function() {
      // open/close component groups
      HRB.utils.djshook('component-group-opener').on('click', function() {
        $(this).find('.group-parent-indicator').toggleClass('fa-plus-square-o').toggleClass('fa-minus-square-o').end().parent().toggleClass('open');
      });
    });




  </script>
  <script src="//dka575ofm4ao0.cloudfront.net/assets/highstock.min-b9ba9c464e6eccd591f88678082da2cc.js"></script>

  <script>
    String.prototype.commafy = function () {
      return this.replace(/(^|[^\w.])(\d{4,})/g, function($0, $1, $2) {
        return $1 + $2.replace(/\d(?=(?:\d\d\d)+(?!\d))/g, "$&,");
      });
    }

    Number.prototype.commafy = function () {
      return String(this).commafy();
    }

    $(function() {
      SP.currentPage.numberToDecimalPlaces = function(num, dec) {
        if (dec == 0) {
          return Math.round(num).commafy();
        }

        newnum = num.toFixed(dec)
        var finalValue;

        // this gets rid of the 100.000% thing
        if (num == parseInt(newnum))
          finalValue = Math.round(num);
        else
          finalValue = newnum;

        return finalValue.commafy();
      }

      SP.currentPage.getDataForTimePeriod = function(period) {
          $.ajax({
            type: "GET",
            // this line must be end up with "//status.*" type of URLs (no protocol, just leading slashes). customers use SSL through us or by offloading with
            // cloudflare or something like it and the request.protocol the server sees is different than what the browser sees
            url: "//status.voxmedia.com/metrics-display/ll6trf0dg2fh/_.json".replace('_', period)
          }).success(function(metricsDisplay, textStatus, xhr) {
            var summary = metricsDisplay.summary
              , $metricSummaryLabel = HRB.utils.djshook('metrics-display-current-ll6trf0dg2fh');

            if(summary) {
              // we need to do a basic check to make sure we have any data at all
              var hasDataRollupsAvailable = false;
              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                if(metricsDisplay.metrics[h].data.length > 0) {
                  hasDataRollupsAvailable = true;
                  break;
                }
              }

              // weird case where librato doesn't have anything indexed yet
              // this is mostly the case when we have a self-metric with fresh data
              if(!hasDataRollupsAvailable) {
                $metricSummaryLabel.html("<small>Oops! No data has been indexed for this time period yet.</small>");
                $metricSummaryLabel.parent().next().hide();
                return;
              } else {
                $metricSummaryLabel.parent().next().show();
              }

              // proceed since we have data
              $metricSummaryLabel.text(SP.currentPage.numberToDecimalPlaces(summary['mean'], 3 ) + '%');

              var metricDataPoints = {}
                , intervalMsec = metricsDisplay.period.interval * 1000;

              var startingBucketMsec = parseInt((new Date()).getTime() / intervalMsec) * intervalMsec;

              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                metricDataPoints[metricsDisplay.metrics[h].metric.id] = []
                var data = metricsDisplay.metrics[h].data
                  , currentBucketMsec = startingBucketMsec;

                for(var i = metricsDisplay.period.count; i > 0; i--) {
                  // loop over the data and pull out the data point with the following characteristics
                  //  -> closest to currentBucketMsec
                  //  -> without being greater than currentMsecBucket
                  //  -> without being more than 1 intervalMsec bucket away
                  var valueToUse = null;
                  for(var j = data.length - 1; j >= 0; j--) {
                    var currentTimestampMsec = data[j].timestamp * 1000;
                    if(currentTimestampMsec <= currentBucketMsec && currentTimestampMsec > (currentBucketMsec - intervalMsec)) {
                      valueToUse = data[j].value;
                      // console.log("Using ts:" + currentTimestampMsec + " with value:" + valueToUse + " for bucket:" + currentBucketMsec);
                      break;
                    }
                  }

                  // local time
                  var offset = -1 * (new Date()).getTimezoneOffset() * 60 * 1000;

                  metricDataPoints[metricsDisplay.metrics[h].metric.id].push([currentBucketMsec + offset, valueToUse])
                  currentBucketMsec -= intervalMsec;
                }

                metricDataPoints[metricsDisplay.metrics[h].metric.id].reverse();
              }

                    $('#metrics-display-graph-container-ll6trf0dg2fh').highcharts('StockChart', {
        plotOptions : {
          series : {
            animation : false,
            color : '#0da540'
          },
        },

        chart : {
          backgroundColor: '#ffffff'
        },

        title : {
          text: '',
          style: {
                display: 'none',
             }
        },

        credits : {
          enabled : false
        },

        exporting : {
          enabled : false
        },

        rangeSelector : {
          enabled : false
        },

        scrollbar : {
          enabled : false
        },

        navigator : {
          enabled : false
        },

        xAxis: {
          gridLineColor : '#rgba(224,224,224,.8)',
          labels: {
            style : {
              color: '#AAAAAA'
            }
          },
          lineColor: '#E0E0E0',
          
        },

        yAxis: {
          gridLineColor : 'rgba(224,224,224,.5)',
          labels: {
            style : {
              color: '#AAAAAA'
            },
            enabled : true
          },
          showLastLabel: true,
                        tickPositions: [0.0, 50.0, 100.0],
               min: 0.0,
               startOnTick: false,
               max: 100.0,
               endOnTick: false,

        },
        
        series : [
              {
      name : 'SB Nation Uptime',
      data : metricDataPoints['ll6trf0dg2fh'],
      tooltip: {
        valueSuffix: '%'
      },
      enableMouseTracking : ($(window).outerWidth() > 480) && false
    }

        ],

        tooltip: {
          enabled: ($(window).outerWidth() > 480) && false,
          valueDecimals: function(value) {
            var v = SP.currentPage.numberToDecimalPlaces(value, 3);
            if(v.indexOf('.') == -1)
              return 0;
            else
              return 3;
          },
        }
      });

            } else {
              $metricSummaryLabel.text("Failed to load.");
            }
          });
          $.ajax({
            type: "GET",
            // this line must be end up with "//status.*" type of URLs (no protocol, just leading slashes). customers use SSL through us or by offloading with
            // cloudflare or something like it and the request.protocol the server sees is different than what the browser sees
            url: "//status.voxmedia.com/metrics-display/b3m8pgs7h70q/_.json".replace('_', period)
          }).success(function(metricsDisplay, textStatus, xhr) {
            var summary = metricsDisplay.summary
              , $metricSummaryLabel = HRB.utils.djshook('metrics-display-current-b3m8pgs7h70q');

            if(summary) {
              // we need to do a basic check to make sure we have any data at all
              var hasDataRollupsAvailable = false;
              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                if(metricsDisplay.metrics[h].data.length > 0) {
                  hasDataRollupsAvailable = true;
                  break;
                }
              }

              // weird case where librato doesn't have anything indexed yet
              // this is mostly the case when we have a self-metric with fresh data
              if(!hasDataRollupsAvailable) {
                $metricSummaryLabel.html("<small>Oops! No data has been indexed for this time period yet.</small>");
                $metricSummaryLabel.parent().next().hide();
                return;
              } else {
                $metricSummaryLabel.parent().next().show();
              }

              // proceed since we have data
              $metricSummaryLabel.text(SP.currentPage.numberToDecimalPlaces(summary['mean'], 3 ) + '%');

              var metricDataPoints = {}
                , intervalMsec = metricsDisplay.period.interval * 1000;

              var startingBucketMsec = parseInt((new Date()).getTime() / intervalMsec) * intervalMsec;

              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                metricDataPoints[metricsDisplay.metrics[h].metric.id] = []
                var data = metricsDisplay.metrics[h].data
                  , currentBucketMsec = startingBucketMsec;

                for(var i = metricsDisplay.period.count; i > 0; i--) {
                  // loop over the data and pull out the data point with the following characteristics
                  //  -> closest to currentBucketMsec
                  //  -> without being greater than currentMsecBucket
                  //  -> without being more than 1 intervalMsec bucket away
                  var valueToUse = null;
                  for(var j = data.length - 1; j >= 0; j--) {
                    var currentTimestampMsec = data[j].timestamp * 1000;
                    if(currentTimestampMsec <= currentBucketMsec && currentTimestampMsec > (currentBucketMsec - intervalMsec)) {
                      valueToUse = data[j].value;
                      // console.log("Using ts:" + currentTimestampMsec + " with value:" + valueToUse + " for bucket:" + currentBucketMsec);
                      break;
                    }
                  }

                  // local time
                  var offset = -1 * (new Date()).getTimezoneOffset() * 60 * 1000;

                  metricDataPoints[metricsDisplay.metrics[h].metric.id].push([currentBucketMsec + offset, valueToUse])
                  currentBucketMsec -= intervalMsec;
                }

                metricDataPoints[metricsDisplay.metrics[h].metric.id].reverse();
              }

                    $('#metrics-display-graph-container-b3m8pgs7h70q').highcharts('StockChart', {
        plotOptions : {
          series : {
            animation : false,
            color : '#0da540'
          },
        },

        chart : {
          backgroundColor: '#ffffff'
        },

        title : {
          text: '',
          style: {
                display: 'none',
             }
        },

        credits : {
          enabled : false
        },

        exporting : {
          enabled : false
        },

        rangeSelector : {
          enabled : false
        },

        scrollbar : {
          enabled : false
        },

        navigator : {
          enabled : false
        },

        xAxis: {
          gridLineColor : '#rgba(224,224,224,.8)',
          labels: {
            style : {
              color: '#AAAAAA'
            }
          },
          lineColor: '#E0E0E0',
          
        },

        yAxis: {
          gridLineColor : 'rgba(224,224,224,.5)',
          labels: {
            style : {
              color: '#AAAAAA'
            },
            enabled : true
          },
          showLastLabel: true,
                        tickPositions: [0.0, 50.0, 100.0],
               min: 0.0,
               startOnTick: false,
               max: 100.0,
               endOnTick: false,

        },
        
        series : [
              {
      name : 'The Verge Uptime',
      data : metricDataPoints['b3m8pgs7h70q'],
      tooltip: {
        valueSuffix: '%'
      },
      enableMouseTracking : ($(window).outerWidth() > 480) && false
    }

        ],

        tooltip: {
          enabled: ($(window).outerWidth() > 480) && false,
          valueDecimals: function(value) {
            var v = SP.currentPage.numberToDecimalPlaces(value, 3);
            if(v.indexOf('.') == -1)
              return 0;
            else
              return 3;
          },
        }
      });

            } else {
              $metricSummaryLabel.text("Failed to load.");
            }
          });
          $.ajax({
            type: "GET",
            // this line must be end up with "//status.*" type of URLs (no protocol, just leading slashes). customers use SSL through us or by offloading with
            // cloudflare or something like it and the request.protocol the server sees is different than what the browser sees
            url: "//status.voxmedia.com/metrics-display/s6vzf4zmcv05/_.json".replace('_', period)
          }).success(function(metricsDisplay, textStatus, xhr) {
            var summary = metricsDisplay.summary
              , $metricSummaryLabel = HRB.utils.djshook('metrics-display-current-s6vzf4zmcv05');

            if(summary) {
              // we need to do a basic check to make sure we have any data at all
              var hasDataRollupsAvailable = false;
              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                if(metricsDisplay.metrics[h].data.length > 0) {
                  hasDataRollupsAvailable = true;
                  break;
                }
              }

              // weird case where librato doesn't have anything indexed yet
              // this is mostly the case when we have a self-metric with fresh data
              if(!hasDataRollupsAvailable) {
                $metricSummaryLabel.html("<small>Oops! No data has been indexed for this time period yet.</small>");
                $metricSummaryLabel.parent().next().hide();
                return;
              } else {
                $metricSummaryLabel.parent().next().show();
              }

              // proceed since we have data
              $metricSummaryLabel.text(SP.currentPage.numberToDecimalPlaces(summary['mean'], 3 ) + '%');

              var metricDataPoints = {}
                , intervalMsec = metricsDisplay.period.interval * 1000;

              var startingBucketMsec = parseInt((new Date()).getTime() / intervalMsec) * intervalMsec;

              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                metricDataPoints[metricsDisplay.metrics[h].metric.id] = []
                var data = metricsDisplay.metrics[h].data
                  , currentBucketMsec = startingBucketMsec;

                for(var i = metricsDisplay.period.count; i > 0; i--) {
                  // loop over the data and pull out the data point with the following characteristics
                  //  -> closest to currentBucketMsec
                  //  -> without being greater than currentMsecBucket
                  //  -> without being more than 1 intervalMsec bucket away
                  var valueToUse = null;
                  for(var j = data.length - 1; j >= 0; j--) {
                    var currentTimestampMsec = data[j].timestamp * 1000;
                    if(currentTimestampMsec <= currentBucketMsec && currentTimestampMsec > (currentBucketMsec - intervalMsec)) {
                      valueToUse = data[j].value;
                      // console.log("Using ts:" + currentTimestampMsec + " with value:" + valueToUse + " for bucket:" + currentBucketMsec);
                      break;
                    }
                  }

                  // local time
                  var offset = -1 * (new Date()).getTimezoneOffset() * 60 * 1000;

                  metricDataPoints[metricsDisplay.metrics[h].metric.id].push([currentBucketMsec + offset, valueToUse])
                  currentBucketMsec -= intervalMsec;
                }

                metricDataPoints[metricsDisplay.metrics[h].metric.id].reverse();
              }

                    $('#metrics-display-graph-container-s6vzf4zmcv05').highcharts('StockChart', {
        plotOptions : {
          series : {
            animation : false,
            color : '#0da540'
          },
        },

        chart : {
          backgroundColor: '#ffffff'
        },

        title : {
          text: '',
          style: {
                display: 'none',
             }
        },

        credits : {
          enabled : false
        },

        exporting : {
          enabled : false
        },

        rangeSelector : {
          enabled : false
        },

        scrollbar : {
          enabled : false
        },

        navigator : {
          enabled : false
        },

        xAxis: {
          gridLineColor : '#rgba(224,224,224,.8)',
          labels: {
            style : {
              color: '#AAAAAA'
            }
          },
          lineColor: '#E0E0E0',
          
        },

        yAxis: {
          gridLineColor : 'rgba(224,224,224,.5)',
          labels: {
            style : {
              color: '#AAAAAA'
            },
            enabled : true
          },
          showLastLabel: true,
                        tickPositions: [0.0, 50.0, 100.0],
               min: 0.0,
               startOnTick: false,
               max: 100.0,
               endOnTick: false,

        },
        
        series : [
              {
      name : 'Polygon Uptime',
      data : metricDataPoints['s6vzf4zmcv05'],
      tooltip: {
        valueSuffix: '%'
      },
      enableMouseTracking : ($(window).outerWidth() > 480) && false
    }

        ],

        tooltip: {
          enabled: ($(window).outerWidth() > 480) && false,
          valueDecimals: function(value) {
            var v = SP.currentPage.numberToDecimalPlaces(value, 3);
            if(v.indexOf('.') == -1)
              return 0;
            else
              return 3;
          },
        }
      });

            } else {
              $metricSummaryLabel.text("Failed to load.");
            }
          });
          $.ajax({
            type: "GET",
            // this line must be end up with "//status.*" type of URLs (no protocol, just leading slashes). customers use SSL through us or by offloading with
            // cloudflare or something like it and the request.protocol the server sees is different than what the browser sees
            url: "//status.voxmedia.com/metrics-display/zy1t6tx2dn25/_.json".replace('_', period)
          }).success(function(metricsDisplay, textStatus, xhr) {
            var summary = metricsDisplay.summary
              , $metricSummaryLabel = HRB.utils.djshook('metrics-display-current-zy1t6tx2dn25');

            if(summary) {
              // we need to do a basic check to make sure we have any data at all
              var hasDataRollupsAvailable = false;
              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                if(metricsDisplay.metrics[h].data.length > 0) {
                  hasDataRollupsAvailable = true;
                  break;
                }
              }

              // weird case where librato doesn't have anything indexed yet
              // this is mostly the case when we have a self-metric with fresh data
              if(!hasDataRollupsAvailable) {
                $metricSummaryLabel.html("<small>Oops! No data has been indexed for this time period yet.</small>");
                $metricSummaryLabel.parent().next().hide();
                return;
              } else {
                $metricSummaryLabel.parent().next().show();
              }

              // proceed since we have data
              $metricSummaryLabel.text(SP.currentPage.numberToDecimalPlaces(summary['mean'], 3 ) + '%');

              var metricDataPoints = {}
                , intervalMsec = metricsDisplay.period.interval * 1000;

              var startingBucketMsec = parseInt((new Date()).getTime() / intervalMsec) * intervalMsec;

              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                metricDataPoints[metricsDisplay.metrics[h].metric.id] = []
                var data = metricsDisplay.metrics[h].data
                  , currentBucketMsec = startingBucketMsec;

                for(var i = metricsDisplay.period.count; i > 0; i--) {
                  // loop over the data and pull out the data point with the following characteristics
                  //  -> closest to currentBucketMsec
                  //  -> without being greater than currentMsecBucket
                  //  -> without being more than 1 intervalMsec bucket away
                  var valueToUse = null;
                  for(var j = data.length - 1; j >= 0; j--) {
                    var currentTimestampMsec = data[j].timestamp * 1000;
                    if(currentTimestampMsec <= currentBucketMsec && currentTimestampMsec > (currentBucketMsec - intervalMsec)) {
                      valueToUse = data[j].value;
                      // console.log("Using ts:" + currentTimestampMsec + " with value:" + valueToUse + " for bucket:" + currentBucketMsec);
                      break;
                    }
                  }

                  // local time
                  var offset = -1 * (new Date()).getTimezoneOffset() * 60 * 1000;

                  metricDataPoints[metricsDisplay.metrics[h].metric.id].push([currentBucketMsec + offset, valueToUse])
                  currentBucketMsec -= intervalMsec;
                }

                metricDataPoints[metricsDisplay.metrics[h].metric.id].reverse();
              }

                    $('#metrics-display-graph-container-zy1t6tx2dn25').highcharts('StockChart', {
        plotOptions : {
          series : {
            animation : false,
            color : '#0da540'
          },
        },

        chart : {
          backgroundColor: '#ffffff'
        },

        title : {
          text: '',
          style: {
                display: 'none',
             }
        },

        credits : {
          enabled : false
        },

        exporting : {
          enabled : false
        },

        rangeSelector : {
          enabled : false
        },

        scrollbar : {
          enabled : false
        },

        navigator : {
          enabled : false
        },

        xAxis: {
          gridLineColor : '#rgba(224,224,224,.8)',
          labels: {
            style : {
              color: '#AAAAAA'
            }
          },
          lineColor: '#E0E0E0',
          
        },

        yAxis: {
          gridLineColor : 'rgba(224,224,224,.5)',
          labels: {
            style : {
              color: '#AAAAAA'
            },
            enabled : true
          },
          showLastLabel: true,
                        tickPositions: [0.0, 50.0, 100.0],
               min: 0.0,
               startOnTick: false,
               max: 100.0,
               endOnTick: false,

        },
        
        series : [
              {
      name : 'Vox Uptime',
      data : metricDataPoints['zy1t6tx2dn25'],
      tooltip: {
        valueSuffix: '%'
      },
      enableMouseTracking : ($(window).outerWidth() > 480) && false
    }

        ],

        tooltip: {
          enabled: ($(window).outerWidth() > 480) && false,
          valueDecimals: function(value) {
            var v = SP.currentPage.numberToDecimalPlaces(value, 3);
            if(v.indexOf('.') == -1)
              return 0;
            else
              return 3;
          },
        }
      });

            } else {
              $metricSummaryLabel.text("Failed to load.");
            }
          });
          $.ajax({
            type: "GET",
            // this line must be end up with "//status.*" type of URLs (no protocol, just leading slashes). customers use SSL through us or by offloading with
            // cloudflare or something like it and the request.protocol the server sees is different than what the browser sees
            url: "//status.voxmedia.com/metrics-display/v178lspqgkc8/_.json".replace('_', period)
          }).success(function(metricsDisplay, textStatus, xhr) {
            var summary = metricsDisplay.summary
              , $metricSummaryLabel = HRB.utils.djshook('metrics-display-current-v178lspqgkc8');

            if(summary) {
              // we need to do a basic check to make sure we have any data at all
              var hasDataRollupsAvailable = false;
              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                if(metricsDisplay.metrics[h].data.length > 0) {
                  hasDataRollupsAvailable = true;
                  break;
                }
              }

              // weird case where librato doesn't have anything indexed yet
              // this is mostly the case when we have a self-metric with fresh data
              if(!hasDataRollupsAvailable) {
                $metricSummaryLabel.html("<small>Oops! No data has been indexed for this time period yet.</small>");
                $metricSummaryLabel.parent().next().hide();
                return;
              } else {
                $metricSummaryLabel.parent().next().show();
              }

              // proceed since we have data
              $metricSummaryLabel.text(SP.currentPage.numberToDecimalPlaces(summary['mean'], 3 ) + '%');

              var metricDataPoints = {}
                , intervalMsec = metricsDisplay.period.interval * 1000;

              var startingBucketMsec = parseInt((new Date()).getTime() / intervalMsec) * intervalMsec;

              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                metricDataPoints[metricsDisplay.metrics[h].metric.id] = []
                var data = metricsDisplay.metrics[h].data
                  , currentBucketMsec = startingBucketMsec;

                for(var i = metricsDisplay.period.count; i > 0; i--) {
                  // loop over the data and pull out the data point with the following characteristics
                  //  -> closest to currentBucketMsec
                  //  -> without being greater than currentMsecBucket
                  //  -> without being more than 1 intervalMsec bucket away
                  var valueToUse = null;
                  for(var j = data.length - 1; j >= 0; j--) {
                    var currentTimestampMsec = data[j].timestamp * 1000;
                    if(currentTimestampMsec <= currentBucketMsec && currentTimestampMsec > (currentBucketMsec - intervalMsec)) {
                      valueToUse = data[j].value;
                      // console.log("Using ts:" + currentTimestampMsec + " with value:" + valueToUse + " for bucket:" + currentBucketMsec);
                      break;
                    }
                  }

                  // local time
                  var offset = -1 * (new Date()).getTimezoneOffset() * 60 * 1000;

                  metricDataPoints[metricsDisplay.metrics[h].metric.id].push([currentBucketMsec + offset, valueToUse])
                  currentBucketMsec -= intervalMsec;
                }

                metricDataPoints[metricsDisplay.metrics[h].metric.id].reverse();
              }

                    $('#metrics-display-graph-container-v178lspqgkc8').highcharts('StockChart', {
        plotOptions : {
          series : {
            animation : false,
            color : '#0da540'
          },
        },

        chart : {
          backgroundColor: '#ffffff'
        },

        title : {
          text: '',
          style: {
                display: 'none',
             }
        },

        credits : {
          enabled : false
        },

        exporting : {
          enabled : false
        },

        rangeSelector : {
          enabled : false
        },

        scrollbar : {
          enabled : false
        },

        navigator : {
          enabled : false
        },

        xAxis: {
          gridLineColor : '#rgba(224,224,224,.8)',
          labels: {
            style : {
              color: '#AAAAAA'
            }
          },
          lineColor: '#E0E0E0',
          
        },

        yAxis: {
          gridLineColor : 'rgba(224,224,224,.5)',
          labels: {
            style : {
              color: '#AAAAAA'
            },
            enabled : true
          },
          showLastLabel: true,
                        tickPositions: [0.0, 50.0, 100.0],
               min: 0.0,
               startOnTick: false,
               max: 100.0,
               endOnTick: false,

        },
        
        series : [
              {
      name : 'Eater Uptime',
      data : metricDataPoints['lc9jq0z0lhhd'],
      tooltip: {
        valueSuffix: '%'
      },
      enableMouseTracking : ($(window).outerWidth() > 480) && true
    }

        ],

        tooltip: {
          enabled: ($(window).outerWidth() > 480) && true,
          valueDecimals: function(value) {
            var v = SP.currentPage.numberToDecimalPlaces(value, 3);
            if(v.indexOf('.') == -1)
              return 0;
            else
              return 3;
          },
        }
      });

            } else {
              $metricSummaryLabel.text("Failed to load.");
            }
          });
          $.ajax({
            type: "GET",
            // this line must be end up with "//status.*" type of URLs (no protocol, just leading slashes). customers use SSL through us or by offloading with
            // cloudflare or something like it and the request.protocol the server sees is different than what the browser sees
            url: "//status.voxmedia.com/metrics-display/zllsvjcpv4mp/_.json".replace('_', period)
          }).success(function(metricsDisplay, textStatus, xhr) {
            var summary = metricsDisplay.summary
              , $metricSummaryLabel = HRB.utils.djshook('metrics-display-current-zllsvjcpv4mp');

            if(summary) {
              // we need to do a basic check to make sure we have any data at all
              var hasDataRollupsAvailable = false;
              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                if(metricsDisplay.metrics[h].data.length > 0) {
                  hasDataRollupsAvailable = true;
                  break;
                }
              }

              // weird case where librato doesn't have anything indexed yet
              // this is mostly the case when we have a self-metric with fresh data
              if(!hasDataRollupsAvailable) {
                $metricSummaryLabel.html("<small>Oops! No data has been indexed for this time period yet.</small>");
                $metricSummaryLabel.parent().next().hide();
                return;
              } else {
                $metricSummaryLabel.parent().next().show();
              }

              // proceed since we have data
              $metricSummaryLabel.text(SP.currentPage.numberToDecimalPlaces(summary['mean'], 3 ) + '');

              var metricDataPoints = {}
                , intervalMsec = metricsDisplay.period.interval * 1000;

              var startingBucketMsec = parseInt((new Date()).getTime() / intervalMsec) * intervalMsec;

              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                metricDataPoints[metricsDisplay.metrics[h].metric.id] = []
                var data = metricsDisplay.metrics[h].data
                  , currentBucketMsec = startingBucketMsec;

                for(var i = metricsDisplay.period.count; i > 0; i--) {
                  // loop over the data and pull out the data point with the following characteristics
                  //  -> closest to currentBucketMsec
                  //  -> without being greater than currentMsecBucket
                  //  -> without being more than 1 intervalMsec bucket away
                  var valueToUse = null;
                  for(var j = data.length - 1; j >= 0; j--) {
                    var currentTimestampMsec = data[j].timestamp * 1000;
                    if(currentTimestampMsec <= currentBucketMsec && currentTimestampMsec > (currentBucketMsec - intervalMsec)) {
                      valueToUse = data[j].value;
                      // console.log("Using ts:" + currentTimestampMsec + " with value:" + valueToUse + " for bucket:" + currentBucketMsec);
                      break;
                    }
                  }

                  // local time
                  var offset = -1 * (new Date()).getTimezoneOffset() * 60 * 1000;

                  metricDataPoints[metricsDisplay.metrics[h].metric.id].push([currentBucketMsec + offset, valueToUse])
                  currentBucketMsec -= intervalMsec;
                }

                metricDataPoints[metricsDisplay.metrics[h].metric.id].reverse();
              }

                    $('#metrics-display-graph-container-zllsvjcpv4mp').highcharts('StockChart', {
        plotOptions : {
          series : {
            animation : false,
            color : '#0da540'
          },
        },

        chart : {
          backgroundColor: '#ffffff'
        },

        title : {
          text: '',
          style: {
                display: 'none',
             }
        },

        credits : {
          enabled : false
        },

        exporting : {
          enabled : false
        },

        rangeSelector : {
          enabled : false
        },

        scrollbar : {
          enabled : false
        },

        navigator : {
          enabled : false
        },

        xAxis: {
          gridLineColor : '#rgba(224,224,224,.8)',
          labels: {
            style : {
              color: '#AAAAAA'
            }
          },
          lineColor: '#E0E0E0',
          
        },

        yAxis: {
          gridLineColor : 'rgba(224,224,224,.5)',
          labels: {
            style : {
              color: '#AAAAAA'
            },
            enabled : true
          },
          showLastLabel: true,
                        tickPositions: [0.0, 50.0, 100.0],
               min: 0.0,
               startOnTick: false,
               max: 100.0,
               endOnTick: false,

        },
        
        series : [
              {
      name : 'Racked Uptime',
      data : metricDataPoints['hwrrp4n8pw2x'],
      tooltip: {
        valueSuffix: ''
      },
      enableMouseTracking : ($(window).outerWidth() > 480) && true
    }

        ],

        tooltip: {
          enabled: ($(window).outerWidth() > 480) && true,
          valueDecimals: function(value) {
            var v = SP.currentPage.numberToDecimalPlaces(value, 3);
            if(v.indexOf('.') == -1)
              return 0;
            else
              return 3;
          },
        }
      });

            } else {
              $metricSummaryLabel.text("Failed to load.");
            }
          });
          $.ajax({
            type: "GET",
            // this line must be end up with "//status.*" type of URLs (no protocol, just leading slashes). customers use SSL through us or by offloading with
            // cloudflare or something like it and the request.protocol the server sees is different than what the browser sees
            url: "//status.voxmedia.com/metrics-display/2vrj0v1g34xb/_.json".replace('_', period)
          }).success(function(metricsDisplay, textStatus, xhr) {
            var summary = metricsDisplay.summary
              , $metricSummaryLabel = HRB.utils.djshook('metrics-display-current-2vrj0v1g34xb');

            if(summary) {
              // we need to do a basic check to make sure we have any data at all
              var hasDataRollupsAvailable = false;
              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                if(metricsDisplay.metrics[h].data.length > 0) {
                  hasDataRollupsAvailable = true;
                  break;
                }
              }

              // weird case where librato doesn't have anything indexed yet
              // this is mostly the case when we have a self-metric with fresh data
              if(!hasDataRollupsAvailable) {
                $metricSummaryLabel.html("<small>Oops! No data has been indexed for this time period yet.</small>");
                $metricSummaryLabel.parent().next().hide();
                return;
              } else {
                $metricSummaryLabel.parent().next().show();
              }

              // proceed since we have data
              $metricSummaryLabel.text(SP.currentPage.numberToDecimalPlaces(summary['mean'], 3 ) + '%');

              var metricDataPoints = {}
                , intervalMsec = metricsDisplay.period.interval * 1000;

              var startingBucketMsec = parseInt((new Date()).getTime() / intervalMsec) * intervalMsec;

              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                metricDataPoints[metricsDisplay.metrics[h].metric.id] = []
                var data = metricsDisplay.metrics[h].data
                  , currentBucketMsec = startingBucketMsec;

                for(var i = metricsDisplay.period.count; i > 0; i--) {
                  // loop over the data and pull out the data point with the following characteristics
                  //  -> closest to currentBucketMsec
                  //  -> without being greater than currentMsecBucket
                  //  -> without being more than 1 intervalMsec bucket away
                  var valueToUse = null;
                  for(var j = data.length - 1; j >= 0; j--) {
                    var currentTimestampMsec = data[j].timestamp * 1000;
                    if(currentTimestampMsec <= currentBucketMsec && currentTimestampMsec > (currentBucketMsec - intervalMsec)) {
                      valueToUse = data[j].value;
                      // console.log("Using ts:" + currentTimestampMsec + " with value:" + valueToUse + " for bucket:" + currentBucketMsec);
                      break;
                    }
                  }

                  // local time
                  var offset = -1 * (new Date()).getTimezoneOffset() * 60 * 1000;

                  metricDataPoints[metricsDisplay.metrics[h].metric.id].push([currentBucketMsec + offset, valueToUse])
                  currentBucketMsec -= intervalMsec;
                }

                metricDataPoints[metricsDisplay.metrics[h].metric.id].reverse();
              }

                    $('#metrics-display-graph-container-2vrj0v1g34xb').highcharts('StockChart', {
        plotOptions : {
          series : {
            animation : false,
            color : '#0da540'
          },
        },

        chart : {
          backgroundColor: '#ffffff'
        },

        title : {
          text: '',
          style: {
                display: 'none',
             }
        },

        credits : {
          enabled : false
        },

        exporting : {
          enabled : false
        },

        rangeSelector : {
          enabled : false
        },

        scrollbar : {
          enabled : false
        },

        navigator : {
          enabled : false
        },

        xAxis: {
          gridLineColor : '#rgba(224,224,224,.8)',
          labels: {
            style : {
              color: '#AAAAAA'
            }
          },
          lineColor: '#E0E0E0',
          
        },

        yAxis: {
          gridLineColor : 'rgba(224,224,224,.5)',
          labels: {
            style : {
              color: '#AAAAAA'
            },
            enabled : true
          },
          showLastLabel: true,
                        tickPositions: [0.0, 50.0, 100.0],
               min: 0.0,
               startOnTick: false,
               max: 100.0,
               endOnTick: false,

        },
        
        series : [
              {
      name : 'VoxMedia.com Uptime',
      data : metricDataPoints['2vrj0v1g34xb'],
      tooltip: {
        valueSuffix: '%'
      },
      enableMouseTracking : ($(window).outerWidth() > 480) && false
    }

        ],

        tooltip: {
          enabled: ($(window).outerWidth() > 480) && false,
          valueDecimals: function(value) {
            var v = SP.currentPage.numberToDecimalPlaces(value, 3);
            if(v.indexOf('.') == -1)
              return 0;
            else
              return 3;
          },
        }
      });

            } else {
              $metricSummaryLabel.text("Failed to load.");
            }
          });
          $.ajax({
            type: "GET",
            // this line must be end up with "//status.*" type of URLs (no protocol, just leading slashes). customers use SSL through us or by offloading with
            // cloudflare or something like it and the request.protocol the server sees is different than what the browser sees
            url: "//status.voxmedia.com/metrics-display/ml2w2pjdqc4s/_.json".replace('_', period)
          }).success(function(metricsDisplay, textStatus, xhr) {
            var summary = metricsDisplay.summary
              , $metricSummaryLabel = HRB.utils.djshook('metrics-display-current-ml2w2pjdqc4s');

            if(summary) {
              // we need to do a basic check to make sure we have any data at all
              var hasDataRollupsAvailable = false;
              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                if(metricsDisplay.metrics[h].data.length > 0) {
                  hasDataRollupsAvailable = true;
                  break;
                }
              }

              // weird case where librato doesn't have anything indexed yet
              // this is mostly the case when we have a self-metric with fresh data
              if(!hasDataRollupsAvailable) {
                $metricSummaryLabel.html("<small>Oops! No data has been indexed for this time period yet.</small>");
                $metricSummaryLabel.parent().next().hide();
                return;
              } else {
                $metricSummaryLabel.parent().next().show();
              }

              // proceed since we have data
              $metricSummaryLabel.text(SP.currentPage.numberToDecimalPlaces(summary['mean'], 0 ) + 'ms');

              var metricDataPoints = {}
                , intervalMsec = metricsDisplay.period.interval * 1000;

              var startingBucketMsec = parseInt((new Date()).getTime() / intervalMsec) * intervalMsec;

              for(var h = 0; h < metricsDisplay.metrics.length; h++) {
                metricDataPoints[metricsDisplay.metrics[h].metric.id] = []
                var data = metricsDisplay.metrics[h].data
                  , currentBucketMsec = startingBucketMsec;

                for(var i = metricsDisplay.period.count; i > 0; i--) {
                  // loop over the data and pull out the data point with the following characteristics
                  //  -> closest to currentBucketMsec
                  //  -> without being greater than currentMsecBucket
                  //  -> without being more than 1 intervalMsec bucket away
                  var valueToUse = null;
                  for(var j = data.length - 1; j >= 0; j--) {
                    var currentTimestampMsec = data[j].timestamp * 1000;
                    if(currentTimestampMsec <= currentBucketMsec && currentTimestampMsec > (currentBucketMsec - intervalMsec)) {
                      valueToUse = data[j].value;
                      // console.log("Using ts:" + currentTimestampMsec + " with value:" + valueToUse + " for bucket:" + currentBucketMsec);
                      break;
                    }
                  }

                  // local time
                  var offset = -1 * (new Date()).getTimezoneOffset() * 60 * 1000;

                  metricDataPoints[metricsDisplay.metrics[h].metric.id].push([currentBucketMsec + offset, valueToUse])
                  currentBucketMsec -= intervalMsec;
                }

                metricDataPoints[metricsDisplay.metrics[h].metric.id].reverse();
              }

                    $('#metrics-display-graph-container-ml2w2pjdqc4s').highcharts('StockChart', {
        plotOptions : {
          series : {
            animation : false,
            color : '#0da540'
          },
        },

        chart : {
          backgroundColor: '#ffffff'
        },

        title : {
          text: '',
          style: {
                display: 'none',
             }
        },

        credits : {
          enabled : false
        },

        exporting : {
          enabled : false
        },

        rangeSelector : {
          enabled : false
        },

        scrollbar : {
          enabled : false
        },

        navigator : {
          enabled : false
        },

        xAxis: {
          gridLineColor : '#rgba(224,224,224,.8)',
          labels: {
            style : {
              color: '#AAAAAA'
            }
          },
          lineColor: '#E0E0E0',
          
        },

        yAxis: {
          gridLineColor : 'rgba(224,224,224,.5)',
          labels: {
            style : {
              color: '#AAAAAA'
            },
            enabled : true
          },
          showLastLabel: true,
                         tickPixelInterval: 40,
               min: 0.0,
               startOnTick: false,

        },
        
        series : [
              {
      name : 'Chorus Average Response Time (App Server)',
      data : metricDataPoints['ml2w2pjdqc4s'],
      tooltip: {
        valueSuffix: 'ms'
      },
      enableMouseTracking : ($(window).outerWidth() > 480) && false
    }

        ],

        tooltip: {
          enabled: ($(window).outerWidth() > 480) && false,
          valueDecimals: function(value) {
            var v = SP.currentPage.numberToDecimalPlaces(value, 0);
            if(v.indexOf('.') == -1)
              return 0;
            else
              return 0;
          },
        }
      });

            } else {
              $metricSummaryLabel.text("Failed to load.");
            }
          });
      }

      var $timePeriodToggles = HRB.utils.djshook('data-time-period-toggle');

      SP.currentPage.activeTimePeriodToggle = function(period) {
        $timePeriodToggles.removeClass('active');
        $timePeriodToggles.filter('[data-time-period="' + period + '"]').addClass('active');
      }

      SP.currentPage.getAndDisplayInitialChartData = function() {
        if (window.location.hash == '#week') {
          SP.currentPage.getDataForTimePeriod('week');
          SP.currentPage.activeTimePeriodToggle('week');
        } 
        else if (window.location.hash == '#month') {
          SP.currentPage.getDataForTimePeriod('month');
          SP.currentPage.activeTimePeriodToggle('month');
        }
        else {
          SP.currentPage.getDataForTimePeriod('day');
          SP.currentPage.activeTimePeriodToggle('day');
        }
      }

      $timePeriodToggles.on('click', function() {
        var newPeriod = $(this).attr('data-time-period');

        SP.currentPage.activeTimePeriodToggle(newPeriod);
        SP.currentPage.getDataForTimePeriod(newPeriod);
        window.location.hash = newPeriod;

        return false;
      });

      SP.currentPage.getAndDisplayInitialChartData();
    })
  </script>



    


<!-- FOR FLASH NOTICES -->



<!-- FOR ERROR -->



    <script>
  $(function() {
    $('.powered-by').show().css('display','inline-block !important');
  });
</script>
    





  </body>
</html>
